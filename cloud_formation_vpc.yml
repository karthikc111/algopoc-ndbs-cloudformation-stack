AWSTemplateFormatVersion: '2010-09-09'
Description: Create a VPC with public and private subnets and a NAT instance.

Resources:
  NDBSVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "20.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  NDPublicSubnet: # Renamed PublicSubnet resource to NDPublicSubnet
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NDBS-VPC
      CidrBlock: "20.0.1.0/24"
      AvailabilityZone: "ap-south-1" # Modified AvailabilityZone
      Tags: # Added Tags
        - Key: Name
          Value: ndbs-public-subnet

  NDPrivateSubnet: # Renamed PrivateSubnet resource to NDPrivateSubnet
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NDBS-VPC
      CidrBlock: "20.0.2.0/24"
      AvailabilityZone: "ap-south-1" # Modified AvailabilityZone
      Tags: # Added Tags
        - Key: Name
          Value: ndbs-private-subnet


  NDInternetGateway: # Renamed InternetGateway resource to NDInternetGateway
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: # Added Tags
        - Key: Name
          Value: ndbs-IGW

  NDAttachGateway: # Renamed AttachGateway resource to NDAttachGateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref NDBS-VPC
      InternetGatewayId: !Ref NDInternetGateway

  NDPublicRouteTable: # Renamed PublicRouteTable resource to NDPublicRouteTable
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NDBS-VPC
      Tags: # Added Tags
        - Key: Name
          Value: ndbs-public-rt

  NDPrivateRouteTable: # Renamed PrivateRouteTable resource to NDPrivateRouteTable
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NDBS-VPC
      Tags: # Added Tags
        - Key: Name
          Value: ndbs-private-rt

  NDPublicRoute: # Renamed PublicRoute resource to NDPublicRoute
    Type: AWS::EC2::Route
    DependsOn: NDAttachGateway # Modified DependsOn
    Properties:
      RouteTableId: !Ref NDPublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref NDInternetGateway

  NDPrivateRoute: # Renamed PrivateRoute resource to NDPrivateRoute
    Type: AWS::EC2::Route
    DependsOn: NDAttachGateway # Modified DependsOn
    Properties:
      RouteTableId: !Ref NDPrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      InstanceId: !Ref NDNatInstance

  NDNatSecurityGroup: # Renamed NatSecurityGroup resource to NDNatSecurityGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable NAT instance to access internet
      VpcId: !Ref NDBS-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags: # Added Tags
        - Key: Name
          Value: ndbs-nat-security-group

  NDNatInstance: # Renamed NatInstance resource to NDNatInstance
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-024c1c12bec3c56b7
      KeyName: my-key-pair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          SubnetId: !Ref NDPublicSubnet
          GroupSet:
            - !Ref NDNatSecurityGroup
      Tags: # Added Tags
        - Key: Name
          Value: ndbs-NAT-Instance

Outputs:
  NDPublicSubnetId: # Renamed PublicSubnetId output to NDPublicSubnetId
    Value: !Ref NDPublicSubnet
  NDPrivateSubnetId: # Renamed PrivateSubnetId output to NDPrivateSubnetId
    Value: !Ref NDPrivateSubnet
